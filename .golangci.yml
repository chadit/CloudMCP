version: "2"

run:
  timeout: 5m
  modules-download-mode: readonly
  go: "1.24"

linters:
  enable:
    # Core security and quality linters - MUST NOT DISABLE
    - gosec          # Security analysis - critical for production
    - err113         # Static error definitions - improves error handling
    - errcheck       # Unchecked errors - critical for reliability
    - staticcheck    # Comprehensive static analysis - finds bugs
    - govet          # Official Go static analysis - finds bugs
    - unused         # Dead code detection - cleaner codebase
    - ineffassign    # Ineffective assignments - potential bugs
    - misspell       # Spelling errors - low noise, high value
    - forcetypeassert # Unchecked type assertions - runtime safety
    
    # Important quality linters
    - funcorder      # Method ordering - good code organization
    - gocritic       # Comprehensive Go style checks - good practices
    - revive         # Fast Go linter with many useful checks
    
  disable:
    # Disable only genuinely problematic or cosmetic linters
    - mnd            # Magic number detector - too many false positives for constants
    - nlreturn       # Newline return style - purely cosmetic
    - wsl            # Whitespace linter - purely cosmetic  
    - gocognit       # Cognitive complexity - overly strict for domain logic
    - nestif         # Nested if statements - sometimes necessary for clarity
    - gocyclo        # Cyclomatic complexity - overly strict for domain logic
    - exhaustive     # Exhaustive switch statements - not always needed
    - varnamelen     # Variable name length - can conflict with Go conventions
    - containedctx   # Context in struct - sometimes necessary for clean APIs
    - nonamedreturns # Named returns - legitimate Go pattern
    - testpackage    # Test package names - design choice
    - prealloc       # Slice preallocation - micro-optimization
    - nilerr         # Nil error return - can have false positives
    - unparam        # Unused parameters - needed for interface compliance
    - tagliatelle    # Struct tag format - not critical for functionality
    - decorder       # Declaration order - purely cosmetic
    - exhaustruct    # Exhaustive struct initialization - design choice
    - goheader       # File header requirements - not needed
    - gomodguard     # Module guard - not needed for this project
    - ireturn        # Interface return types - design choice
    - maintidx       # Maintainability index - overly strict
    - nakedret       # Naked returns - design choice
    - predeclared    # Predeclared identifier usage - design choice
    - usestdlibvars  # Standard library variable usage - design choice
    - whitespace     # Whitespace rules - purely cosmetic
    
    # Original complexity disables - keep these as they're overly strict
    - forbidigo      # Forbid identifiers - too restrictive
    - depguard       # Import restrictions - not needed
    - lll            # Line length - handled by gofmt
    - cyclop         # Cyclomatic complexity - duplicate of gocyclo  
    - funlen         # Function length - overly strict

linters-settings:
  wrapcheck:
    # Allow our custom error wrappers and common patterns
    ignoreSigs:
      - github.com/chadit/CloudMCP/pkg/types.NewToolError
      - github.com/chadit/CloudMCP/pkg/types.NewServiceError
      - errors.New(
      - fmt.Errorf(
    ignorePackageGlobs:
      - "*.test"
      - "test/*"
      - "*_test.go"

issues:
  exclude-rules:
    # Exclude some linters from running on test files
    - path: _test\.go
      linters:
        - gosec     # Security warnings often false positives in tests
        - dupl      # Duplicate code acceptable in tests
    # Exclude gosec entirely from logger tests - controlled test file paths cause false positives
    - path: pkg/logger/logger_test\.go
      linters:
        - gosec
  max-issues-per-linter: 0
  max-same-issues: 0