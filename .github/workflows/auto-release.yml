name: Auto Release

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
      - '.github/**'
      - 'docs/**'

jobs:
  auto-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    # Only run if the commit message doesn't contain [skip release]
    if: "!contains(github.event.head_commit.message, '[skip release]')"
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Check if release needed
        id: check_release
        run: |
          # Get the latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          
          # Get commits since last tag
          COMMITS_SINCE_TAG=$(git rev-list --count "$LATEST_TAG..HEAD" 2>/dev/null || git rev-list --count HEAD)
          
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "commits_since_tag=$COMMITS_SINCE_TAG" >> $GITHUB_OUTPUT
          
          if [ "$COMMITS_SINCE_TAG" -gt 0 ]; then
            echo "needs_release=true" >> $GITHUB_OUTPUT
            echo "Found $COMMITS_SINCE_TAG commits since $LATEST_TAG - release needed"
          else
            echo "needs_release=false" >> $GITHUB_OUTPUT
            echo "No new commits since $LATEST_TAG - no release needed"
          fi

      - name: Determine version bump
        id: version_bump
        if: steps.check_release.outputs.needs_release == 'true'
        run: |
          # Analyze commit messages to determine bump type
          LATEST_TAG="${{ steps.check_release.outputs.latest_tag }}"
          
          # Get commit messages since last tag
          if [ "$LATEST_TAG" != "v0.0.0" ]; then
            COMMIT_MESSAGES=$(git log --pretty=format:"%s" "$LATEST_TAG..HEAD")
          else
            COMMIT_MESSAGES=$(git log --pretty=format:"%s")
          fi
          
          # Determine bump type based on conventional commits
          BUMP_TYPE="patch"
          
          if echo "$COMMIT_MESSAGES" | grep -qE "^(feat|feature)(\(.+\))?!:|^.+!:|BREAKING CHANGE"; then
            BUMP_TYPE="major"
          elif echo "$COMMIT_MESSAGES" | grep -qE "^(feat|feature)(\(.+\))?:"; then
            BUMP_TYPE="minor"
          fi
          
          echo "bump_type=$BUMP_TYPE" >> $GITHUB_OUTPUT
          echo "Detected bump type: $BUMP_TYPE"

      - name: Calculate next version
        id: next_version
        if: steps.check_release.outputs.needs_release == 'true'
        run: |
          LATEST_TAG="${{ steps.check_release.outputs.latest_tag }}"
          BUMP_TYPE="${{ steps.version_bump.outputs.bump_type }}"
          
          # Remove 'v' prefix if present
          CLEAN_VERSION=${LATEST_TAG#v}
          
          # Split version into components
          IFS='.' read -ra VERSION_PARTS <<< "$CLEAN_VERSION"
          MAJOR=${VERSION_PARTS[0]:-0}
          MINOR=${VERSION_PARTS[1]:-0}
          PATCH=${VERSION_PARTS[2]:-0}
          
          # Increment based on bump type
          case $BUMP_TYPE in
            major)
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            minor)
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            patch)
              PATCH=$((PATCH + 1))
              ;;
          esac
          
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          NEW_TAG="v$NEW_VERSION"
          
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT
          echo "Next version: $NEW_VERSION (tag: $NEW_TAG)"

      - name: Update version.go
        if: steps.check_release.outputs.needs_release == 'true'
        run: |
          NEW_VERSION="${{ steps.next_version.outputs.new_version }}"
          
          # Update the Version constant in version.go
          sed -i "s/Version = \".*\"/Version = \"$NEW_VERSION\"/" internal/version/version.go
          
          # Verify the change
          echo "Updated version.go:"
          grep -n "Version = " internal/version/version.go

      - name: Run tests
        if: steps.check_release.outputs.needs_release == 'true'
        run: |
          go mod tidy
          go test ./...

      - name: Build and test
        if: steps.check_release.outputs.needs_release == 'true'
        run: |
          # Quick build test
          go build -o /tmp/cloud-mcp cmd/server/main.go
          go build -o /tmp/cloud-mcp-setup cmd/cloud-mcp-setup/main.go

      - name: Commit version update
        if: steps.check_release.outputs.needs_release == 'true'
        run: |
          NEW_TAG="${{ steps.next_version.outputs.new_tag }}"
          
          # Add and commit the version.go change
          git add internal/version/version.go
          git commit -m "chore: bump version to $NEW_TAG [skip release]"

      - name: Create and push tag
        if: steps.check_release.outputs.needs_release == 'true'
        run: |
          NEW_TAG="${{ steps.next_version.outputs.new_tag }}"
          
          # Create annotated tag
          git tag -a "$NEW_TAG" -m "Release $NEW_TAG"
          
          # Push the commit and tag
          git push origin main
          git push origin "$NEW_TAG"

      - name: Generate release notes
        id: release_notes
        if: steps.check_release.outputs.needs_release == 'true'
        run: |
          NEW_TAG="${{ steps.next_version.outputs.new_tag }}"
          PREVIOUS_TAG="${{ steps.check_release.outputs.latest_tag }}"
          
          # Generate changelog
          echo "## What's Changed" > release_notes.md
          echo "" >> release_notes.md
          
          # Get commits since last tag (excluding the version bump commit)
          if [ "$PREVIOUS_TAG" != "v0.0.0" ]; then
            git log --pretty=format:"- %s (%h)" "$PREVIOUS_TAG..HEAD~1" >> release_notes.md
          else
            git log --pretty=format:"- %s (%h)" HEAD~1 >> release_notes.md
          fi
          
          echo "" >> release_notes.md
          echo "## Installation" >> release_notes.md
          echo "" >> release_notes.md
          echo '```bash' >> release_notes.md
          echo "go install github.com/chadit/CloudMCP/cmd/server@$NEW_TAG" >> release_notes.md
          echo "go install github.com/chadit/CloudMCP/cmd/cloud-mcp-setup@$NEW_TAG" >> release_notes.md
          echo '```' >> release_notes.md
          
          # Set output for release creation
          {
            echo 'release_notes<<EOF'
            cat release_notes.md
            echo EOF
          } >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        if: steps.check_release.outputs.needs_release == 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.next_version.outputs.new_tag }}
          name: Release ${{ steps.next_version.outputs.new_tag }}
          body: ${{ steps.release_notes.outputs.release_notes }}
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Summary
        if: steps.check_release.outputs.needs_release == 'true'
        run: |
          NEW_TAG="${{ steps.next_version.outputs.new_tag }}"
          echo "âœ… Auto-release $NEW_TAG created successfully!"
          echo ""
          echo "Users can now install with:"
          echo "go install github.com/chadit/CloudMCP/cmd/server@$NEW_TAG"
          echo "go install github.com/chadit/CloudMCP/cmd/cloud-mcp-setup@$NEW_TAG"
          echo ""
          echo "Or latest:"
          echo "go install github.com/chadit/CloudMCP/cmd/server@latest"
          echo "go install github.com/chadit/CloudMCP/cmd/cloud-mcp-setup@latest"