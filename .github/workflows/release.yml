name: Release

# Security: Minimal permissions by default
permissions:
  contents: read

on:
  # Manual release trigger
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      prerelease:
        description: 'Create as prerelease'
        required: false
        default: false
        type: boolean
      
  # Automatic release on main branch (if enabled)
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
      - '.github/**'
      - 'docs/**'
      - 'scripts/**'

env:
  GO_VERSION: '1.24'

# Prevent concurrent releases
concurrency:
  group: release
  cancel-in-progress: false

jobs:
  # Gate to determine if release should proceed
  release-gate:
    name: Release Gate
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      should-release: ${{ steps.check.outputs.should-release }}
      version-type: ${{ steps.check.outputs.version-type }}
      is-prerelease: ${{ steps.check.outputs.is-prerelease }}
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
          
      - name: Check release conditions
        id: check
        run: |
          should_release="false"
          version_type="patch"
          is_prerelease="false"
          
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # Manual release - always proceed
            should_release="true"
            version_type="${{ github.event.inputs.version_type }}"
            is_prerelease="${{ github.event.inputs.prerelease }}"
            echo "Manual release triggered: $version_type (prerelease: $is_prerelease)"
          
          elif [[ "${{ github.event_name }}" == "push" ]]; then
            # Auto-release: check if there are new commits and no [skip release] tag
            if [[ ! "${{ github.event.head_commit.message }}" =~ \[skip\ release\] ]]; then
              # Get latest tag
              latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
              
              # Count commits since tag
              commits_since_tag=$(git rev-list --count "$latest_tag..HEAD" 2>/dev/null || git rev-list --count HEAD)
              
              if [[ "$commits_since_tag" -gt 0 ]]; then
                should_release="true"
                
                # Determine version bump from commit messages
                commit_messages=$(git log --pretty=format:"%s" "$latest_tag..HEAD" 2>/dev/null || git log --pretty=format:"%s")
                
                if echo "$commit_messages" | grep -qE "^(feat|feature)(\(.+\))?!:|^.+!:|BREAKING CHANGE"; then
                  version_type="major"
                elif echo "$commit_messages" | grep -qE "^(feat|feature)(\(.+\))?:"; then
                  version_type="minor"
                else
                  version_type="patch"
                fi
                
                echo "Auto-release triggered: $commits_since_tag commits since $latest_tag, bump type: $version_type"
              else
                echo "No new commits since $latest_tag, skipping release"
              fi
            else
              echo "Commit message contains [skip release], skipping auto-release"
            fi
          fi
          
          echo "should-release=$should_release" >> $GITHUB_OUTPUT
          echo "version-type=$version_type" >> $GITHUB_OUTPUT
          echo "is-prerelease=$is_prerelease" >> $GITHUB_OUTPUT

  # Main release job
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: release-gate
    if: needs.release-gate.outputs.should-release == 'true'
    timeout-minutes: 30
    
    permissions:
      contents: write      # Create releases and tags
      id-token: write     # OIDC for signing
      actions: write      # Upload artifacts
    
    outputs:
      release-tag: ${{ steps.version.outputs.new-tag }}
      release-version: ${{ steps.version.outputs.new-version }}
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Go
        uses: actions/setup-go@41dfa10bad2bb2ae585af6ee5bb4d7d973ad74ed # v5.1.0
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install signing tools
        run: |
          # Install cosign for artifact signing
          ./scripts/security-utils.sh install cosign
          COSIGN_PATH="$(./scripts/security-utils.sh get-path cosign)"
          ln -sf "$COSIGN_PATH" /usr/local/bin/cosign

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Calculate next version
        id: version
        run: |
          # Get latest tag
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Latest tag: $latest_tag"
          
          # Parse version
          clean_version=${latest_tag#v}
          IFS='.' read -ra version_parts <<< "$clean_version"
          major=${version_parts[0]:-0}
          minor=${version_parts[1]:-0}
          patch=${version_parts[2]:-0}
          
          # Increment based on type
          case "${{ needs.release-gate.outputs.version-type }}" in
            major)
              major=$((major + 1))
              minor=0
              patch=0
              ;;
            minor)
              minor=$((minor + 1))
              patch=0
              ;;
            patch)
              patch=$((patch + 1))
              ;;
          esac
          
          new_version="$major.$minor.$patch"
          new_tag="v$new_version"
          
          echo "new-version=$new_version" >> $GITHUB_OUTPUT
          echo "new-tag=$new_tag" >> $GITHUB_OUTPUT
          echo "Next version: $new_version (tag: $new_tag)"

      - name: Update version file
        run: |
          # Update internal version
          if [[ -f "internal/version/version.go" ]]; then
            sed -i "s/Version = \".*\"/Version = \"${{ steps.version.outputs.new-version }}\"/" internal/version/version.go
            echo "Updated version.go to ${{ steps.version.outputs.new-version }}"
          fi

      - name: Run tests
        run: |
          go mod tidy
          go test -short ./...

      - name: Build release artifacts
        run: |
          version="${{ steps.version.outputs.new-version }}"
          build_date=$(date -u '+%Y-%m-%d %H:%M:%S UTC')
          git_commit=$(git rev-parse HEAD)
          
          # Build flags with version info
          ldflags="-s -w -buildid= \
            -X 'github.com/chadit/CloudMCP/internal/version.Version=$version' \
            -X 'github.com/chadit/CloudMCP/internal/version.BuildDate=$build_date' \
            -X 'github.com/chadit/CloudMCP/internal/version.GitCommit=$git_commit'"
          
          mkdir -p dist
          
          echo "Building release binaries for version $version..."
          
          # Linux (with full security hardening)
          GOOS=linux GOARCH=amd64 CGO_ENABLED=1 go build \
            -ldflags="$ldflags -linkmode=external -extldflags=-static" \
            -trimpath -buildmode=pie -tags=netgo,osusergo \
            -o dist/cloud-mcp-linux-amd64 ./cmd/cloud-mcp/main.go
            
          GOOS=linux GOARCH=arm64 CGO_ENABLED=0 go build \
            -ldflags="$ldflags" \
            -trimpath -tags=netgo,osusergo \
            -o dist/cloud-mcp-linux-arm64 ./cmd/cloud-mcp/main.go
            
          # macOS
          GOOS=darwin GOARCH=amd64 CGO_ENABLED=0 go build \
            -ldflags="$ldflags" \
            -trimpath -tags=netgo,osusergo \
            -o dist/cloud-mcp-darwin-amd64 ./cmd/cloud-mcp/main.go
            
          GOOS=darwin GOARCH=arm64 CGO_ENABLED=0 go build \
            -ldflags="$ldflags" \
            -trimpath -tags=netgo,osusergo \
            -o dist/cloud-mcp-darwin-arm64 ./cmd/cloud-mcp/main.go
            
          # Windows
          GOOS=windows GOARCH=amd64 CGO_ENABLED=0 go build \
            -ldflags="$ldflags" \
            -trimpath -tags=netgo,osusergo \
            -o dist/cloud-mcp-windows-amd64.exe ./cmd/cloud-mcp/main.go
          
          # List artifacts
          ls -la dist/

      - name: Generate checksums
        run: |
          cd dist/
          sha256sum cloud-mcp-* > checksums.txt
          echo "Generated checksums:"
          cat checksums.txt

      - name: Generate SBOM
        run: |
          # Use simplified SBOM generator
          ./scripts/generate-sbom-simple.sh --version "${{ steps.version.outputs.new-version }}" --output dist/sbom

      - name: Sign artifacts
        env:
          COSIGN_YES: true
        run: |
          echo "Signing release artifacts with cosign..."
          cd dist/
          
          # Sign all artifacts
          for file in cloud-mcp-* checksums.txt; do
            if [[ -f "$file" ]]; then
              echo "Signing: $file"
              cosign sign-blob --yes --bundle "$file.cosign.bundle" "$file"
            fi
          done

      - name: Commit version update
        if: github.event_name == 'push'  # Only for auto-releases
        run: |
          if git diff --quiet; then
            echo "No changes to commit"
          else
            git add -A
            git commit -m "chore: bump version to ${{ steps.version.outputs.new-tag }} [skip release]"
            git push origin main
          fi

      - name: Create and push tag
        run: |
          git tag -a "${{ steps.version.outputs.new-tag }}" -m "Release ${{ steps.version.outputs.new-tag }}"
          git push origin "${{ steps.version.outputs.new-tag }}"

      - name: Generate release notes
        id: release_notes
        run: |
          tag="${{ steps.version.outputs.new-tag }}"
          latest_tag=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          
          echo "## What's Changed" > release_notes.md
          echo "" >> release_notes.md
          
          if [[ -n "$latest_tag" ]]; then
            git log --pretty=format:"- %s (%h)" "$latest_tag..HEAD" >> release_notes.md
          else
            git log --pretty=format:"- %s (%h)" --max-count=10 >> release_notes.md
          fi
          
          cat >> release_notes.md << EOF

## Installation

\`\`\`bash
# Install latest version
go install github.com/chadit/CloudMCP/cmd/cloud-mcp@$tag

# Or download binary from release assets
curl -L -o cloud-mcp https://github.com/chadit/CloudMCP/releases/download/$tag/cloud-mcp-linux-amd64
chmod +x cloud-mcp
\`\`\`

## Verification

All release artifacts are signed with cosign for supply chain security:

\`\`\`bash
# Verify binary signature (example for linux-amd64)
cosign verify-blob \\
  --bundle cloud-mcp-linux-amd64.cosign.bundle \\
  --certificate-identity-regexp="https://github.com/chadit/CloudMCP" \\
  --certificate-oidc-issuer="https://token.actions.githubusercontent.com" \\
  cloud-mcp-linux-amd64
\`\`\`
EOF
          
          # Set multiline output
          {
            echo 'release_notes<<EOF'
            cat release_notes.md  
            echo 'EOF'
          } >> $GITHUB_OUTPUT

      - name: Create GitHub release
        uses: softprops/action-gh-release@de2c0eb89ae2a093876385947365aca7b0e5f844 # v2.0.8
        with:
          tag_name: ${{ steps.version.outputs.new-tag }}
          name: Release ${{ steps.version.outputs.new-tag }}
          body: ${{ steps.release_notes.outputs.release_notes }}
          prerelease: ${{ needs.release-gate.outputs.is-prerelease }}
          files: |
            dist/cloud-mcp-*
            dist/checksums.txt
            dist/*.cosign.bundle
            dist/sbom/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Release summary
        run: |
          echo "🎉 Release ${{ steps.version.outputs.new-tag }} created successfully!"
          echo ""
          echo "📦 Assets: $(ls dist/ | wc -l) files"
          echo "🔐 Signed: All artifacts signed with cosign"
          echo "📋 SBOM: Software Bill of Materials included"
          echo ""
          echo "Installation:"
          echo "  go install github.com/chadit/CloudMCP/cmd/cloud-mcp@${{ steps.version.outputs.new-tag }}"

  # Notification job (optional - can be extended for Slack, Discord, etc.)
  notify:
    name: Release Notification
    runs-on: ubuntu-latest
    needs: [release-gate, create-release]
    if: always() && needs.release-gate.outputs.should-release == 'true'
    
    steps:
      - name: Notify release status
        run: |
          if [[ "${{ needs.create-release.result }}" == "success" ]]; then
            echo "✅ Release ${{ needs.create-release.outputs.release-tag }} completed successfully"
            echo "🌐 Download: https://github.com/${{ github.repository }}/releases/tag/${{ needs.create-release.outputs.release-tag }}"
          else
            echo "❌ Release failed"
            exit 1
          fi