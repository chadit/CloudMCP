name: Release

on:
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      prerelease:
        description: 'Create as prerelease'
        required: false
        default: false
        type: boolean

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Get latest tag
        id: get_tag
        run: |
          # Get the latest tag, fallback to v0.0.0 if no tags exist
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "Latest tag: $LATEST_TAG"

      - name: Calculate next version
        id: next_version
        run: |
          LATEST_TAG="${{ steps.get_tag.outputs.latest_tag }}"
          VERSION_BUMP="${{ github.event.inputs.version_bump }}"
          
          # Remove 'v' prefix if present
          CLEAN_VERSION=${LATEST_TAG#v}
          
          # Split version into components
          IFS='.' read -ra VERSION_PARTS <<< "$CLEAN_VERSION"
          MAJOR=${VERSION_PARTS[0]:-0}
          MINOR=${VERSION_PARTS[1]:-0}
          PATCH=${VERSION_PARTS[2]:-0}
          
          # Increment based on bump type
          case $VERSION_BUMP in
            major)
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            minor)
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            patch)
              PATCH=$((PATCH + 1))
              ;;
          esac
          
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          NEW_TAG="v$NEW_VERSION"
          
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT
          echo "Next version: $NEW_VERSION (tag: $NEW_TAG)"

      - name: Update version.go
        run: |
          NEW_VERSION="${{ steps.next_version.outputs.new_version }}"
          BUILD_DATE=$(date -u '+%Y-%m-%d %H:%M:%S UTC')
          
          # Update the Version constant in version.go
          sed -i "s/Version = \".*\"/Version = \"$NEW_VERSION\"/" internal/version/version.go
          
          # Verify the change
          echo "Updated version.go:"
          grep -n "Version = " internal/version/version.go

      - name: Run tests
        run: |
          go mod tidy
          go test ./...

      - name: Build binaries
        run: |
          NEW_VERSION="${{ steps.next_version.outputs.new_version }}"
          BUILD_DATE=$(date -u '+%Y-%m-%d %H:%M:%S UTC')
          GIT_COMMIT=$(git rev-parse HEAD)
          GIT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
          
          # Build with ldflags to set build-time variables
          LDFLAGS="-X 'github.com/chadit/CloudMCP/internal/version.BuildDate=$BUILD_DATE' \
                   -X 'github.com/chadit/CloudMCP/internal/version.GitCommit=$GIT_COMMIT' \
                   -X 'github.com/chadit/CloudMCP/internal/version.GitBranch=$GIT_BRANCH'"
          
          # Create build directory
          mkdir -p build
          
          # Build for multiple platforms
          GOOS=linux GOARCH=amd64 go build -ldflags "$LDFLAGS" -o build/cloud-mcp-linux-amd64 cmd/server/main.go
          GOOS=linux GOARCH=arm64 go build -ldflags "$LDFLAGS" -o build/cloud-mcp-linux-arm64 cmd/server/main.go
          GOOS=darwin GOARCH=amd64 go build -ldflags "$LDFLAGS" -o build/cloud-mcp-darwin-amd64 cmd/server/main.go
          GOOS=darwin GOARCH=arm64 go build -ldflags "$LDFLAGS" -o build/cloud-mcp-darwin-arm64 cmd/server/main.go
          GOOS=windows GOARCH=amd64 go build -ldflags "$LDFLAGS" -o build/cloud-mcp-windows-amd64.exe cmd/server/main.go
          
          # Build setup tool
          GOOS=linux GOARCH=amd64 go build -ldflags "$LDFLAGS" -o build/cloud-mcp-setup-linux-amd64 cmd/cloud-mcp-setup/main.go
          GOOS=linux GOARCH=arm64 go build -ldflags "$LDFLAGS" -o build/cloud-mcp-setup-linux-arm64 cmd/cloud-mcp-setup/main.go
          GOOS=darwin GOARCH=amd64 go build -ldflags "$LDFLAGS" -o build/cloud-mcp-setup-darwin-amd64 cmd/cloud-mcp-setup/main.go
          GOOS=darwin GOARCH=arm64 go build -ldflags "$LDFLAGS" -o build/cloud-mcp-setup-darwin-arm64 cmd/cloud-mcp-setup/main.go
          GOOS=windows GOARCH=amd64 go build -ldflags "$LDFLAGS" -o build/cloud-mcp-setup-windows-amd64.exe cmd/cloud-mcp-setup/main.go
          
          # List built files
          ls -la build/

      - name: Commit version update
        run: |
          NEW_TAG="${{ steps.next_version.outputs.new_tag }}"
          
          # Add and commit the version.go change
          git add internal/version/version.go
          git commit -m "chore: bump version to $NEW_TAG"

      - name: Create and push tag
        run: |
          NEW_TAG="${{ steps.next_version.outputs.new_tag }}"
          
          # Create annotated tag
          git tag -a "$NEW_TAG" -m "Release $NEW_TAG"
          
          # Push the commit and tag
          git push origin main
          git push origin "$NEW_TAG"

      - name: Generate release notes
        id: release_notes
        run: |
          NEW_TAG="${{ steps.next_version.outputs.new_tag }}"
          PREVIOUS_TAG="${{ steps.get_tag.outputs.latest_tag }}"
          
          # Generate changelog
          echo "## What's Changed" > release_notes.md
          echo "" >> release_notes.md
          
          # Get commits since last tag
          if [ "$PREVIOUS_TAG" != "v0.0.0" ]; then
            git log --pretty=format:"- %s (%h)" "$PREVIOUS_TAG..HEAD" >> release_notes.md
          else
            git log --pretty=format:"- %s (%h)" >> release_notes.md
          fi
          
          echo "" >> release_notes.md
          echo "## Installation" >> release_notes.md
          echo "" >> release_notes.md
          echo '```bash' >> release_notes.md
          echo "go install github.com/chadit/CloudMCP/cmd/server@$NEW_TAG" >> release_notes.md
          echo "go install github.com/chadit/CloudMCP/cmd/cloud-mcp-setup@$NEW_TAG" >> release_notes.md
          echo '```' >> release_notes.md
          
          # Set output for release creation
          {
            echo 'release_notes<<EOF'
            cat release_notes.md
            echo EOF
          } >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.next_version.outputs.new_tag }}
          name: Release ${{ steps.next_version.outputs.new_tag }}
          body: ${{ steps.release_notes.outputs.release_notes }}
          prerelease: ${{ github.event.inputs.prerelease }}
          files: |
            build/cloud-mcp-*
            build/cloud-mcp-setup-*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update go install instructions
        run: |
          NEW_TAG="${{ steps.next_version.outputs.new_tag }}"
          echo "âœ… Release $NEW_TAG created successfully!"
          echo ""
          echo "Users can now install with:"
          echo "go install github.com/chadit/CloudMCP/cmd/server@$NEW_TAG"
          echo "go install github.com/chadit/CloudMCP/cmd/cloud-mcp-setup@$NEW_TAG"
          echo ""
          echo "Or latest:"
          echo "go install github.com/chadit/CloudMCP/cmd/server@latest"
          echo "go install github.com/chadit/CloudMCP/cmd/cloud-mcp-setup@latest"