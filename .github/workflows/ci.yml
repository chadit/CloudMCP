name: CloudMCP CI/CD Pipeline

permissions:
  contents: read

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  GO_VERSION: '1.24'
  CGO_ENABLED: '0'

jobs:
  # Build and Test
  test:
    name: 🧪 Build & Test
    runs-on: ubuntu-latest
    timeout-minutes: 10
    strategy:
      matrix:
        go-version: ['1.23', '1.24']
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔧 Setup Go ${{ matrix.go-version }}
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}

      - name: 📦 Cache Go Modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ matrix.go-version }}-

      - name: 📥 Download Dependencies
        run: |
          go mod download
          go mod verify

      - name: 🏗️ Build Application
        run: |
          make build-prod
          chmod +x bin/cloud-mcp

      - name: 🧪 Run Tests
        env:
          CGO_ENABLED: '1'  # Enable for race detector
        run: |
          go test -v -race -coverprofile=coverage.out ./...

      - name: 📊 Upload Coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-go${{ matrix.go-version }}
          path: coverage.out
          retention-days: 7

  # Code Quality
  lint:
    name: 🔍 Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 8
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔧 Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
      
      - name: 📦 Cache Lint Tools
        uses: actions/cache@v4
        with:
          path: ~/.cache/golangci-lint
          key: ${{ runner.os }}-golangci-lint-${{ hashFiles('.golangci.yml') }}

      - name: 📥 Prepare Modules
        run: |
          go mod download
          go mod verify

      - name: 🔍 Run golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          args: --timeout=5m

      - name: 🔒 Security Scan
        run: |
          go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
          gosec ./...

  # Container Build & Test
  container:
    name: 🐳 Container Build
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [test, lint]
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64]
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🏗️ Build Container
        run: |
          docker buildx build \
            --platform ${{ matrix.platform }} \
            --tag cloudmcp:ci \
            --load \
            .

      - name: 🔒 Security Scan
        if: matrix.platform == 'linux/amd64'
        run: |
          # Install trivy
          sudo apt-get update
          sudo apt-get install wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy
          
          # Scan container
          trivy image --exit-code 0 --severity HIGH,CRITICAL cloudmcp:ci

      - name: 🧪 Test Container
        if: matrix.platform == 'linux/amd64'
        run: |
          # Start container
          docker run -d --name test-container -p 8080:8080 cloudmcp:ci
          
          # Wait for startup
          sleep 10
          
          # Test health endpoint
          curl -f http://localhost:8080/health
          
          # Cleanup
          docker stop test-container
          docker rm test-container

  # Integration Tests
  integration:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 8
    needs: [test]
    if: github.event_name != 'workflow_dispatch'
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔧 Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: 🏗️ Build Application
        run: |
          make build-prod
          chmod +x bin/cloud-mcp

      - name: 🧪 Run Integration Tests
        run: |
          # Create minimal test config
          echo 'CLOUD_MCP_SERVER_NAME="CloudMCP-Test"' > .env
          echo 'LOG_LEVEL=error' >> .env
          echo 'ENABLE_METRICS=false' >> .env
          chmod 600 .env
          
          # Run integration tests if they exist
          if [ -d "test" ] && [ -f "test/test-local.sh" ]; then
            cd test && ./test-local.sh
          else
            echo "No integration tests found, running basic validation"
            go test -v ./internal/testing/...
          fi