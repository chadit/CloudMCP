name: 'Phase 2: Full Testing'

on:
  # Only run after Phase 1 passes
  workflow_run:
    workflows: ["Phase 1: Fast Feedback"]
    types: [completed]
    branches: [main, develop]
  
  # Allow manual trigger for debugging
  workflow_dispatch:
    inputs:
      skip_phase1:
        description: 'Skip Phase 1 dependency (for debugging only)'
        type: boolean
        default: false

# Security: Minimal permissions, only what's needed
permissions:
  contents: read
  actions: write  # For artifacts
  security-events: write  # For SARIF uploads

env:
  GO_VERSION: '1.23'

# Prevent concurrent runs
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

jobs:
  # Check if we should run based on Phase 1 success
  phase1-gate:
    name: Phase 1 Gate Check
    runs-on: ubuntu-latest
    timeout-minutes: 2
    outputs:
      should-run: ${{ steps.check.outputs.should-run }}
      pr-number: ${{ steps.check.outputs.pr-number }}
    
    steps:
      - name: Check Phase 1 status
        id: check
        run: |
          # Skip check if manually triggered with override
          if [[ "${{ github.event.inputs.skip_phase1 }}" == "true" ]]; then
            echo "should-run=true" >> $GITHUB_OUTPUT
            echo "Manual override: skipping Phase 1 dependency check"
            exit 0
          fi
          
          # For workflow_run events, check if Phase 1 succeeded
          if [[ "${{ github.event_name }}" == "workflow_run" ]]; then
            if [[ "${{ github.event.workflow_run.conclusion }}" == "success" ]]; then
              echo "should-run=true" >> $GITHUB_OUTPUT
              echo "Phase 1 succeeded, proceeding with Phase 2"
              
              # Extract PR number for PR-specific actions
              pr_number="${{ github.event.workflow_run.pull_requests[0].number }}"
              if [[ -n "$pr_number" ]]; then
                echo "pr-number=$pr_number" >> $GITHUB_OUTPUT
              fi
            else
              echo "should-run=false" >> $GITHUB_OUTPUT
              echo "Phase 1 failed or was cancelled, skipping Phase 2"
            fi
          else
            echo "should-run=true" >> $GITHUB_OUTPUT
            echo "Direct trigger, proceeding with Phase 2"
          fi

  # Full test suite with matrix testing
  comprehensive-tests:
    name: Comprehensive Tests
    runs-on: ubuntu-latest
    needs: phase1-gate
    if: needs.phase1-gate.outputs.should-run == 'true'
    timeout-minutes: 15
    
    strategy:
      fail-fast: false
      matrix:
        go-version: ['1.22', '1.23']
        test-type: ['unit', 'integration', 'race']
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          # Get full history for better git-based features
          fetch-depth: 0

      - name: Setup Go ${{ matrix.go-version }}
        uses: actions/setup-go@41dfa10bad2bb2ae585af6ee5bb4d7d973ad74ed # v5.1.0
        with:
          go-version: ${{ matrix.go-version }}
          cache: true
          cache-dependency-path: |
            go.sum
            go.mod

      - name: Download dependencies
        run: |
          go mod download
          go mod verify

      - name: Run unit tests
        if: matrix.test-type == 'unit'
        run: |
          go test -v -short -coverprofile=unit-coverage-go${{ matrix.go-version }}.out ./...
          go tool cover -func=unit-coverage-go${{ matrix.go-version }}.out

      - name: Run integration tests
        if: matrix.test-type == 'integration'
        run: |
          # Run integration tests (mock-based, no live APIs)
          go test -v -tags=integration -coverprofile=integration-coverage-go${{ matrix.go-version }}.out ./...

      - name: Run race condition tests
        if: matrix.test-type == 'race'
        env:
          CGO_ENABLED: 1  # Required for race detector
        run: |
          go test -race -short ./...

      - name: Upload test coverage
        if: matrix.test-type != 'race'
        uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4.4.3
        with:
          name: coverage-${{ matrix.test-type }}-go${{ matrix.go-version }}-${{ github.run_id }}
          path: ${{ matrix.test-type }}-coverage-go${{ matrix.go-version }}.out
          retention-days: 7

  # Security scanning and SBOM generation
  security-and-sbom:
    name: Security Analysis & SBOM
    runs-on: ubuntu-latest
    needs: phase1-gate
    if: needs.phase1-gate.outputs.should-run == 'true'
    timeout-minutes: 12
    permissions:
      contents: read
      security-events: write
      actions: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Setup Go
        uses: actions/setup-go@41dfa10bad2bb2ae585af6ee5bb4d7d973ad74ed # v5.1.0
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install security tools
        run: |
          # Install verified security and scanning tools
          ./scripts/security-utils.sh install trivy
          echo "$(dirname "$(./scripts/security-utils.sh get-path trivy)")" >> $GITHUB_PATH
          
          # Install Syft for SBOM generation
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin

      - name: Run vulnerability scan
        run: |
          # Install govulncheck for Go-specific vulnerability scanning
          go install golang.org/x/vuln/cmd/govulncheck@latest
          
          # Scan for Go vulnerabilities
          govulncheck -json ./... > govulncheck-results.json || true
          
          # Show summary (but don't fail the build)
          govulncheck ./... || true

      - name: Generate lightweight SBOM
        run: |
          # Create simplified SBOM (no over-engineering)
          mkdir -p build/sbom
          
          # Generate SPDX format SBOM
          syft . -o spdx-json=build/sbom/sbom.spdx.json
          
          # Generate CycloneDX format SBOM  
          syft . -o cyclonedx-json=build/sbom/sbom.cyclonedx.json
          
          # Create simple summary
          echo "# SBOM Summary" > build/sbom/README.md
          echo "Generated: $(date -u +%Y-%m-%dT%H:%M:%SZ)" >> build/sbom/README.md
          echo "" >> build/sbom/README.md
          echo "## Files" >> build/sbom/README.md
          echo "- \`sbom.spdx.json\`: SPDX format Software Bill of Materials" >> build/sbom/README.md
          echo "- \`sbom.cyclonedx.json\`: CycloneDX format Software Bill of Materials" >> build/sbom/README.md
          echo "" >> build/sbom/README.md
          echo "## Verification" >> build/sbom/README.md
          echo "These SBOMs catalog all dependencies and components used in CloudMCP." >> build/sbom/README.md
          
          # Show basic statistics
          echo "" >> build/sbom/README.md
          echo "## Statistics" >> build/sbom/README.md
          if command -v jq >/dev/null; then
            total_packages=$(jq '[.packages[] | select(.name != "CloudMCP")] | length' build/sbom/sbom.spdx.json)
            echo "- Total packages: $total_packages" >> build/sbom/README.md
          fi

      - name: Container security scan
        run: |
          # Build Docker image for scanning
          docker build -t cloudmcp:security-scan .
          
          # Scan with Trivy
          TRIVY_PATH="$(./scripts/security-utils.sh get-path trivy)"
          "$TRIVY_PATH" image --format sarif --output trivy-results.sarif cloudmcp:security-scan
          "$TRIVY_PATH" image --format table cloudmcp:security-scan

      - name: Upload SARIF results
        if: always()
        uses: github/codeql-action/upload-sarif@4f3212b61783c3c68e8309a0f18a699764811cda # v3.27.1
        with:
          sarif_file: trivy-results.sarif

      - name: Upload security artifacts
        if: always()
        uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4.4.3
        with:
          name: security-analysis-${{ github.run_id }}
          path: |
            govulncheck-results.json
            trivy-results.sarif
            build/sbom/
          retention-days: 30

  # Multi-platform build testing
  build-test:
    name: Build Testing
    runs-on: ubuntu-latest
    needs: phase1-gate
    if: needs.phase1-gate.outputs.should-run == 'true'
    timeout-minutes: 10
    
    strategy:
      fail-fast: false
      matrix:
        platform:
          - { goos: linux, goarch: amd64, cgo: 1 }
          - { goos: linux, goarch: arm64, cgo: 0 }
          - { goos: darwin, goarch: amd64, cgo: 0 }
          - { goos: darwin, goarch: arm64, cgo: 0 }
          - { goos: windows, goarch: amd64, cgo: 0 }
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Setup Go
        uses: actions/setup-go@41dfa10bad2bb2ae585af6ee5bb4d7d973ad74ed # v5.1.0
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Build for ${{ matrix.platform.goos }}/${{ matrix.platform.goarch }}
        env:
          GOOS: ${{ matrix.platform.goos }}
          GOARCH: ${{ matrix.platform.goarch }}
          CGO_ENABLED: ${{ matrix.platform.cgo }}
        run: |
          # Security-hardened build flags
          LDFLAGS="-s -w -buildid="
          BUILD_FLAGS="-ldflags='$LDFLAGS' -trimpath -tags=netgo,osusergo"
          
          # Add platform-specific security flags
          if [[ "$GOOS" == "linux" && "${{ matrix.platform.cgo }}" == "1" ]]; then
            # Static linking for Linux with CGO (no PIE due to conflict)
            LDFLAGS="$LDFLAGS -linkmode=external -extldflags=-static"
            BUILD_FLAGS="-ldflags='$LDFLAGS' -trimpath -tags=netgo,osusergo"
          elif [[ "$GOOS" != "windows" ]]; then
            # PIE for non-Windows platforms (when not doing static linking)
            BUILD_FLAGS="$BUILD_FLAGS -buildmode=pie"
          fi
          
          # Set output binary name
          BINARY_NAME="cloud-mcp"
          if [[ "$GOOS" == "windows" ]]; then
            BINARY_NAME="cloud-mcp.exe"
          fi
          
          echo "Building $BINARY_NAME for $GOOS/$GOARCH with CGO_ENABLED=$CGO_ENABLED"
          echo "Build flags: $BUILD_FLAGS"
          
          # Create dist directory
          mkdir -p dist
          
          # Build the binary
          go build $BUILD_FLAGS -o "dist/${BINARY_NAME}-${GOOS}-${GOARCH}" ./cmd/cloud-mcp/main.go
          
          # Verify the binary was created
          ls -la "dist/${BINARY_NAME}-${GOOS}-${GOARCH}"

      - name: Upload build artifacts
        uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4.4.3
        with:
          name: build-${{ matrix.platform.goos }}-${{ matrix.platform.goarch }}-${{ github.run_id }}
          path: dist/
          retention-days: 7

  # Container integration test
  container-test:
    name: Container Integration
    runs-on: ubuntu-latest
    needs: phase1-gate
    if: needs.phase1-gate.outputs.should-run == 'true'
    timeout-minutes: 8
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@c47758b77c9736f4b2ef4073d4d51994fabfe349 # v3.7.1

      - name: Build container image
        run: |
          docker buildx build \
            --platform linux/amd64 \
            --tag cloudmcp:test \
            --load \
            .

      - name: Test container functionality
        run: |
          # Test basic container functionality without expecting HTTP endpoints
          # since our minimal MCP server doesn't expose HTTP by default
          
          # Start container and test it can start without errors
          docker run --name cloudmcp-test \
            -e LOG_LEVEL=info \
            cloudmcp:test --help
          
          # Clean up
          docker rm cloudmcp-test

  # Comprehensive test results summary
  test-summary:
    name: Test Results Summary
    runs-on: ubuntu-latest
    needs: [phase1-gate, comprehensive-tests, security-and-sbom, build-test, container-test]
    if: always() && needs.phase1-gate.outputs.should-run == 'true'
    permissions:
      pull-requests: write
    
    steps:
      - name: Generate test summary
        id: summary
        run: |
          # Collect results from all jobs
          comprehensive_result="${{ needs.comprehensive-tests.result }}"
          security_result="${{ needs.security-and-sbom.result }}"  
          build_result="${{ needs.build-test.result }}"
          container_result="${{ needs.container-test.result }}"
          
          # Determine overall status
          overall_success=true
          if [[ "$comprehensive_result" != "success" ]] || \
             [[ "$security_result" != "success" ]] || \
             [[ "$build_result" != "success" ]] || \
             [[ "$container_result" != "success" ]]; then
            overall_success=false
          fi
          
          echo "overall-success=$overall_success" >> $GITHUB_OUTPUT
          echo "comprehensive-result=$comprehensive_result" >> $GITHUB_OUTPUT
          echo "security-result=$security_result" >> $GITHUB_OUTPUT
          echo "build-result=$build_result" >> $GITHUB_OUTPUT
          echo "container-result=$container_result" >> $GITHUB_OUTPUT

      - name: Comment on PR
        if: needs.phase1-gate.outputs.pr-number != '' && github.event_name == 'workflow_run'
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const overallSuccess = '${{ steps.summary.outputs.overall-success }}' === 'true';
            const icon = overallSuccess ? '✅' : '❌';
            const status = overallSuccess ? 'PASSED' : 'FAILED';
            
            const results = {
              'Comprehensive Tests': '${{ steps.summary.outputs.comprehensive-result }}',
              'Security & SBOM': '${{ steps.summary.outputs.security-result }}',
              'Multi-Platform Builds': '${{ steps.summary.outputs.build-result }}',
              'Container Integration': '${{ steps.summary.outputs.container-result }}'
            };
            
            let resultsList = '';
            for (const [name, result] of Object.entries(results)) {
              const resultIcon = result === 'success' ? '✅' : '❌';
              resultsList += `- ${resultIcon} **${name}**: ${result.toUpperCase()}\n`;
            }
            
            const comment = `## ${icon} Phase 2: Full Testing ${status}
            
            **Overall Status:** ${status}
            
            ### Test Results:
            ${resultsList}
            
            ### Test Coverage:
            - ✓ Unit tests (Go 1.22, 1.23)
            - ✓ Integration tests
            - ✓ Race condition detection
            - ✓ Security vulnerability scanning
            - ✓ Multi-platform builds (5 platforms)
            - ✓ Container functionality testing
            - ✓ SBOM generation
            
            ${overallSuccess ? 
              '🎉 **All tests passed!** This PR is ready for review and merge.' : 
              '⚠️ **Some tests failed.** Please review the failures above and fix any issues.'
            }
            
            [View full test results](${context.payload.repository.html_url}/actions/runs/${context.runId})
            `;
            
            // Update or create PR comment
            const prNumber = ${{ needs.phase1-gate.outputs.pr-number }};
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
            });
            
            const existingComment = comments.find(comment => 
              comment.body.includes('Phase 2: Full Testing')
            );
            
            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: comment
              });
            }